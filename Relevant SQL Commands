# I used SQL to aggregate data using multiple joins to select relevant users from a database and group them by activity.

# Use *IN* operator to check whether a value is in a list 
# e.g., selecting the biking and running from the types of exercise list
SELECT * FROM exercise WHERE type IN ("biking", "running"); 
# e.g., selecting everyone BUT biking and running from the types of exercise list
SELECT * FROM exercise WHERE type NOT IN ("biking", "running");

# Select from a table based on information from another table; the query inside the other is called a subquery
# This allows the outer query to stay up to date based on the subquery (should the subquery change values)
# e.g., selecting the exercises recommended by doctors 
SELECT * FROM exercise WHERE type IN (
SELECT type FROM drs_favorites); 

# *LIKE* operator allows for inexact matches; e.g., "increases cardiovascular health." vs "increases cardiovascular health"
# e.g., selecting exercises that docs recommend for improving cardiovascular health 
SELECT * FROM exercise WHERE type IN (
SELECT type FROM drs_favorites WHERE reason LIKE "%cardiovascular%"); 

# Use *HAVING* operator to filter out result based on aggregate functions (e.g. MIN(), MAX(),AVG(), and COUNT())
# SELECT … FROM … GROUP BY … HAVING …;
# e.g., selecting author based on the sum of all the words they've written so long as they wrote over a million
SELECT author, SUM(words) AS total_words FROM books GROUP BY author HAVING total_words > 1000000

# Use *CASE* to create an artificial column (it works like the IF statement in Python) 
e.g., viewing when heart rate is above max, within target, and below target
SELECT type, heart_rate, 
    CASE 
        WHEN heart_rate > 220-20 THEN "above max" 
        WHEN heart_rate > ROUND(.9 * (220-20)) THEN "above target" 
        WHEN heart_rate > ROUND (.5 * (220-20)) THEN "within target" 
        ELSE "below target"
    END as "heart_rate_zone" 
FROM exercise_longs
GROUP BY heart_rate_zone; 


# Relational query: Select data from multiple tables at once by using a JOIN. 
#In all SQL joins, the LEFT table is the one that comes after FROM in your SQL code, and the RIGHT table is the one that comes after JOIN.
# LEFT JOIN is used when you want ALL the information from Table 1, and only the records in Table 2 that have something in common with Table 1
# RIGHT JOIN is just like LEFT JOIN, but the other way around. It's used when you want ALL the information from Table 2, and only the records in Table 1 that have something in common with Table 2.
# INNER JOIN is used when you only want information that has values in both tables
# FULL OUTER JOIN returns everything from both tables, whether there is a match between them or not.



