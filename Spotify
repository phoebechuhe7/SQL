-- For this project, I downloaded Spotify data from Kaggle.
-- Then I created a table to insert Spotify data into.
-- Finally, I performed analytics on the data using SQL. 
-- Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

-- Then I inserted the Spotify Data .csv into the table.

-- Next, I explored the data using the following SQL. 

-- 0. Exploring data 

SELECT * FROM BIT_DB.Spotifydata
LIMIT 10;

-- 1. How many different artists have songs in the top 50? Who has the most number of songs? 
SELECT artist_name, 
COUNT(track_name) as number_of_songs
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY number_of_songs DESC; 

-- 2. Use a CASE statement to rate songs based on their popularity and danceability
SELECT track_name,
CASE
     WHEN popularity > 90 AND danceability > 0.7 THEN "Great"
     WHEN popularity > 90 AND danceability > 0.6 THEN "Good"
     WHEN popularity > 90 AND danceability > 0.5 THEN "Okay"
     ELSE "Bad" 
END AS "Rating"
FROM BIT_DB.Spotifydata;


-- 3. Calculate the average popularity for the artists in the Spotify data table. Then, for every artist with an average popularity of 90 or above, show their name, their average popularity, and label them as a “Top Star”.

WITH Popularity_CTE AS (
    SELECT Spotify.artist_name
    , AVG(Spotify.popularity) AS avg_popularity
    FROM Spotifydata Spotify
    GROUP BY Spotify.artist_name
    ) 

SELECT artist_name
, avg_popularity 'Top Star' AS tag
FROM Popularity_CTE
WHERE avg_popularity >= 90;  
